"""Module contains functionality for parsing HTML page of a particular vulnerability."""

import re

from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers\
    .json_parser import JsonParser
from cve_connector.vendor_cve.implementation.vendors_storage_structures.microsoft import Microsoft
from cve_connector.vendor_cve.implementation.vulnerability_metrics.cvss_v3_metrics import CvssV3

from cve_connector.vendor_cve.implementation.utilities.utility_functions \
    import string_to_date, normalize_string, concat_strings


class MicrosoftVulnerabilityParser(JsonParser):
    """
    Contains functionality for parsing Microsoft JSON.
    """
    def __init__(self, url):
        super().__init__(url)
        self.load_content()
        self.date_format = '%Y-%m-%d'  # 2018-04-18

    def parse(self):
        """
        Provides parsing functionality.

        :return: None
        """
        cve_id = self.data['cveNumber']
        title = self.data['cveTitle']
        descr = self.data['description']
        descr = normalize_string(descr).replace('<p>', '').replace('</p>', '')

        exploited = self.data['exploited']
        publicly_disclosed = self.data['publiclyDisclosed']
        published_str = self.data['publishedDate']
        published = self.get_published_date(published_str)

        base_score = 0.0
        temp_score = 0.0
        env_score = 0.0
        vector_str = ''
        severity = ''

        if self.data['affectedProducts']:
            product = self.data['affectedProducts'][0]
            base_score = product['baseScore']
            temp_score = product['temporalScore']
            env_score = product['environmentScore']
            vector_str = product['vectorString']
            severity = product['severity']

        impacts = [p['impact'] for p in self.data['affectedProducts']]
        impact = concat_strings(set(impacts), ", ").rstrip(', ')

        new_entity = Microsoft(cve_id=cve_id, descr=descr, published=published, expl=exploited,
                               publ_discl=publicly_disclosed, severity=severity, impact=impact,
                               title=title)
        cvss_v3 = CvssV3(base_sc=base_score, temp_sc=temp_score, env_sc=env_score,
                         vec_str=vector_str)
        new_entity.cvss_v3 = cvss_v3
        if new_entity.is_valid_entity():
            self.entities.append(new_entity)

    def get_published_date(self, published_str):
        """
        Extracts and return published date.

        :param published_str: raw string containing published date
        :return: published date
        """
        date_re = re.search(r'\d{4}-\d{2}-\d{2}', published_str)
        return string_to_date(date_re.group(0), self.date_format)
