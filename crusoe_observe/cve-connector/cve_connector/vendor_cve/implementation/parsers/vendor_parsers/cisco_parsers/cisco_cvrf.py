"""Module containing definition of parser of XML files from Cisco."""

import configparser
import pkg_resources
from cve_connector.vendor_cve.implementation.utilities.check_correctness \
    import is_correct_vector_v3, is_correct_score, \
    is_correct_cve_id
from cve_connector.vendor_cve.implementation.utilities.utility_functions \
    import concat_strings, normalize_string, get_number_from_string
from cve_connector.vendor_cve.implementation.vendors_storage_structures.cisco import Cisco
from cve_connector.vendor_cve.implementation.vulnerability_metrics.cvss_v3_metrics import CvssV3

from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers.xml_parser \
    import XmlParser


CONFIG_PATH = pkg_resources.resource_filename(__name__, "../../../data/conf.ini")


class CiscoXmlParser(XmlParser):
    """
    Provides functionality for parsing Cisco XML files.
    """
    def __init__(self, url):
        super().__init__(url)

    def parse_vulnerability_details(self, element, entity):
        """
        Parse properties of vulnerability from element and assign them to entity.

        :param element: XML element
        :param entity: entity which properties are assigned
        :return: True if successful
        """
        cve_id_list = self.parse_by_xpath_with_ns(element, True, True, 'CVE')
        if len(cve_id_list) == 1 and is_correct_cve_id(cve_id_list[0]):
            entity.cve_id = cve_id_list[0]
        else:
            return False

        summary_list = self.parse_by_xpath_with_ns(element, True, True, 'Notes',
                                                   'Note[@Title="Summary"]')
        summary = concat_strings(summary_list, '')
        entity.summary = summary

        base_score_list = self.parse_by_xpath_with_ns(element, True, True, 'BaseScoreV3')
        base_score = ''
        for score in base_score_list:
            score = get_number_from_string(normalize_string(score))
            if is_correct_score(score):
                base_score = score
                break

        temporal_score_list = self.parse_by_xpath_with_ns(element, True, True, 'TemporalScoreV3')
        temp_score = ''
        for score in temporal_score_list:
            score = get_number_from_string(normalize_string(score))
            if is_correct_score(score):
                temp_score = score
                break

        if base_score != '' or temp_score != '':
            cvss_v3 = CvssV3(base_sc=base_score, temp_sc=temp_score)
            entity.cvss_v3 = cvss_v3

        vector_list = self.parse_by_xpath_with_ns(element, True, True, 'VectorV3')
        vector = ''
        for vector_item in vector_list:
            vector_item = normalize_string(vector_item)
            if is_correct_vector_v3(vector_item):
                vector = vector_item
                break
        entity.attack_vector = vector

        details_list = self.parse_by_xpath_with_ns(element, True, True, 'Notes', 'Note')
        details = ''
        for detail in details_list:
            details += normalize_string(detail)
        entity.details = details
        return True

    def parse(self):
        """
        Provides parsing functionality.

        :return: None
        """
        doc_id_list = self.parse_by_xpath_with_ns(self.data, True, False, 'Identification', 'ID')
        advisory_id = ''
        if len(doc_id_list) == 1:
            advisory_id = normalize_string(doc_id_list[0])

        summary_list = self.parse_by_xpath_with_ns(self.data, True, False, 'DocumentNotes', 'Note')
        summary = concat_strings(summary_list)

        vulnerabilities = self.parse_by_xpath_with_ns(self.data, False, True, 'Vulnerability')
        for vulnerability in vulnerabilities:
            new_entity = Cisco()
            if self.parse_vulnerability_details(vulnerability, new_entity):
                new_entity.advisory_id = advisory_id
                new_entity.description = summary + ' ' + new_entity.summary
                self.entities.append(new_entity)

    def parse_by_xpath_with_ns(self, element, text, parsing_vuln, *argv):
        """
        Helper function for parsing specific XML data.

        :param element: XML element
        :param text: True if it is text
        :param parsing_vuln: True if parsing vulnerability data
        :param argv: other arguments
        :return: result of parsing
        """

        config = configparser.ConfigParser()
        config.read(CONFIG_PATH)
        namespaces = {'ns': config['vendor-cve']['cisco_ns'],
                      'vuln': config['vendor-cve']['cisco_vuln']}
        xpath = '.'
        current_ns = 'ns'
        for arg in argv:
            if 'vulnerability' in arg.lower() or parsing_vuln:
                current_ns = 'vuln'
            xpath += '//' + current_ns + ':' + arg
        if text:
            xpath += '/text()'
        return element.xpath(xpath, namespaces=namespaces)

    def get_entities(self):
        """
        Return entities.

        :return: entities
        """
        return self.entities
