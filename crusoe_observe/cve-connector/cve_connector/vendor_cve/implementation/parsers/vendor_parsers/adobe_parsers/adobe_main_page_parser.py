"""Module contains functionality for parsing main page of Adobe vulnerabilities."""

import configparser
import pkg_resources
from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers\
    .html_parser import HtmlParser
from cve_connector.vendor_cve.implementation.utilities.utility_functions \
    import normalize_string, string_to_date


CONFIG_PATH = pkg_resources.resource_filename(__name__, "../../../data/conf.ini")


class AdobeMainPageParser(HtmlParser):
    """
    Class responsible for parsing HTML files from Adobe.
    """
    def __init__(self, url, from_date=None, to_date=None):
        super().__init__(url, from_date, to_date)
        self.date_format = '%m/%d/%Y'  # 1/19/2017
        self.load_content()

    def parse(self):
        """
        Provides functionality for parsing Adobe bulletins.

        :return: None
        """
        tables_list = self.data.xpath('.//div[@class="table parbase section"]//table/tbody')
        tables_list.pop(0)  # recent bulletins table
        for table in tables_list:
            self.parse_table(table)

    def parse_table(self, table):
        """
        Parses one specific table from Adobe bulletin.

        :param table: table extracted in parse() method
        :return: None
        """
        config = configparser.ConfigParser()
        config.read(CONFIG_PATH)
        url_base = config['vendor-cve']['adobe_url_base']

        rows = table.xpath('.//tr')
        for row in rows:
            dates_list = row.xpath('./td/text()')
            if not dates_list:
                continue
            if len(dates_list) < 2:
                raise ValueError('Format of Adobe Advisory main page has changed.')
            published = string_to_date(normalize_string(dates_list[-2]), self.date_format)
            updated = string_to_date(normalize_string(dates_list[-1]), self.date_format)
            if not published or not updated:
                return
            if self.from_date <= published <= self.to_date \
                    or self.from_date <= updated <= self.to_date:
                url_list = row.xpath('./td/a/@href')
                if url_list:
                    url = url_list[0]
                    if 'adobe.com' not in url:
                        url = url_base + url
                    self.entities.append(url)
