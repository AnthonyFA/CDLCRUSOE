"""Module contains helper functionality shared among multiple modules."""

import datetime
import re
from time import strptime, mktime


def concat_strings(list_of_strings, concat_with=' '):
    """
    Concatenates list of strings with specified character and does
    further normalization of the result string.

    :param list_of_strings: list of strings
    :param concat_with: character to be used in join
    :return: one concatenated string
    """
    result = ''
    for string_item in list_of_strings:
        result += normalize_string(string_item) + concat_with
    return result.rstrip()


def normalize_string(string):
    """
    Function returns string without redundant spaces and new lines in string given as an argument.

    :param string: string to be modified
    :return: normalized string
    """
    return re.sub(r'[ ]{2,}', '', string).replace('\n', '').replace('\xa0', '').strip()


def get_current_date():
    """
    Returns current date.

    :return: current date
    """
    return datetime.date.today()


def format_date_parameters(params):
    """
    Formats date parameters.

    :param params: raw (unprocessed) date parameters
    :return: formatted date parameters
    """
    return [int(p.lstrip('0')) for p in params]


def get_cves_from_text(text):
    """
    Extracts CVE from the input text.

    :param text: text from which the CVEs are extracted
    :return: extracted CVEs
    """
    cve_pat = r'CVE-\d+-\d+'
    return re.findall(cve_pat, text.upper())


def string_to_date(original_date_str, time_form):
    """
    Converts string to date with further processing od date.

    :param original_date_str: string containing date
    :param time_form: format of time
    :return: date or None
    """
    try:
        date = strptime(original_date_str, time_form)
        return datetime.date.fromtimestamp(mktime(date))
    except ValueError:
        return None


def date_to_string(original_date):
    """
    Converts date to string with further processing.

    :param original_date: date
    :return: date
    """
    date_format = '%Y-%m-%d'
    try:
        return original_date.strftime(date_format)
    except AttributeError:
        return get_current_date()


def get_number_from_string(string):
    """
    Converts string to a float number (with extended processing).

    :param string: string to be converted to a number
    :return: number
    """
    string = normalize_string(string)
    try:
        return float(string)
    except ValueError:
        return 0.0


def normalize_attributes(attributes):
    """
    For the list of string does normalization of each item.

    :param attributes: list of strings
    :return: normalized attributes
    """
    return [normalize_string(att) for att in attributes]
