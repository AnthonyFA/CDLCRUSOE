from neo4jclient.AbsClient import AbstractClient


class VulnerabilityCompClient(AbstractClient):
    def __init__(self, password, **kwargs):
        super().__init__(password=password, **kwargs)

    def create_shadowserver_part(self, path):
        """
        Create nodes and relationships for  vulnerability_component part.
        1. Parse csv given in path.
        2. Create node of type [:DetectionSystem, :IP, :SecurityEvent] if not already exist.
        3. Create relationship of type [:RAISES, :SOURCE_OF] if not already exists.

        :param path: Path to json.
        :return: neo4j object which contains number of created entities.
        """

        path = f'file:///{path}'

        query = "CALL apoc.load.json($path) " \
                "YIELD value " \
                "UNWIND value.results as entry " \
                "WITH value.detection_system as system, entry.description as description, " \
                "entry.vulnerability as vulnerability, entry.ip as ip, entry.timestamp as timestamp " \
                "WHERE vulnerability is not null " \
                "MERGE (a:IP { address: ip }) " \
                "MERGE(det:DetectionSystem {name: system}) " \
                "MERGE(sec:SecurityEvent {detection_time: datetime(timestamp), " \
                "description: description, type: vulnerability, confirmed: False}) " \
                "MERGE(a)-[:SOURCE_OF]->(sec) " \
                "MERGE(det)-[:RAISES]->(sec) " \
                "RETURN count(*)"

        params = {'path': path}

        self._run_query(query, **params)
