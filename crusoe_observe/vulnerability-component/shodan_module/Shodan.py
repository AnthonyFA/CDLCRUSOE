#!/usr/bin/env python

"""
Check subnets for vulnerabilities using shodan
"""

import datetime
import json
import time
import os
import shodan
import structlog

def read_config_file(filename, logger=structlog.get_logger()):
    """
    Read configuration values from file
    :param filename: name of the file
    :param logger: logger instance
    :return: Configuration data on success, exit with exception otherwise
    """
    try:
        with open(filename) as (json_file):
            configuration_data = json.load(json_file)

        return configuration_data

    except OSError as error:
        logger.error(f'Can\'t open configuration file: {error}')
    except json.JSONDecodeError as json_error:
        logger.error(f'Not a valid JSON file: {json_error}')

def prepare_shodan_query(subnet, query, logger=structlog.get_logger()):
    """
    Format query for shodan api
    :param subnet: checked subnet
    :param query: raw query
    :param logger: logger instance
    :return: Prepared query string
    """
    prepared_query = "net:{} {}".format(subnet, query)
    logger.debug(f'Prepared query: {prepared_query}')

    return prepared_query

def run_shodan_query(api, query, logger=structlog.get_logger()):
    """
    Run shodan query via api
    :param api: shodan api
    :param query: executed query
    :param logger: logger instance
    :return: Results on success, exit with exception otherwise
    """
    try:
        results = api.search(query)
        # print_prettified_json(results)
        return results['matches']

    except shodan.exception.APIError as shodan_error:
        logger.error(f'Error: {shodan_error}')

def print_prettified_json(json_string):
    """
    Print json in human readable form
    :param json_string: string to be printed
    :return: None
    """
    print(json.dumps(json_string, indent=2))

def create_json_output(json_file, json_string):
    """
    Dumps string to file
    :param json_file: file path
    :param json_string: string to be written
    :return: None
    """
    with open(json_file, 'w') as outfile:
        json.dump(json_string, outfile, indent=2)

def create_statistics(results_list, number_of_vulnerabilities, number_of_subnets):
    """
    Create statistics about module
    :param results_list: list with results from shodan api
    :param number_of_vulnerabilities: number of reviewed vulnerabilities
    :param number_of_subnets: number of reviewed subnets
    :return: Statistics
    """
    result = "Statistics: "
    number_of_cases = 0
    number_of_cases += len(results_list)
    result += str(number_of_subnets)

    if number_of_subnets > 1:
        result += " subnets were tested, "
    elif number_of_subnets == 1 or number_of_subnets == 0:
        result += " subnet was tested, "

    if number_of_subnets:
        if number_of_vulnerabilities > 1:
            result += str(number_of_vulnerabilities)
            result += " types of vulnerabilities were reviewed, "
        else:
            return result + " 0 cases discovered, nothing to do"

    if number_of_cases > 0:
        result += str(number_of_cases)
        result += " security events created."
    else:
        result += "nothing was created."

    return result


def process_vulnerabilities(config_file, shodan_api_key, subnets, neo4j_path, json_name, logger=structlog.get_logger()):
    """
    Run whole module
    :param config_file: path to the config file
    :param shodan_api_key: shodan api key
    :param subnets: reviewed subnets
    :param neo4j_path: output path
    :param json_name: output file name
    :param logger: logger instance
    :return: Statistics on success, exception otherwise
    """
    if os.path.isfile(config_file):

        subnets = json.loads(subnets)
        input_json = read_config_file(config_file)

        if input_json:

            api = shodan.Shodan(shodan_api_key)

            try:
                api_info = api.info()
                logger.info(f' {api_info}')
            except shodan.exception.APIError as shodan_error:
                return logger.error(f'Error: {shodan_error}')

            output_json = {'detection_system': 'Shodan'}
            result_list = []
            queries = input_json['queries']
            number_of_subnets = len(subnets)
            number_of_queries = len(queries)

            logger.info(f'Number of subnets: : {number_of_subnets}')
            logger.info(f'Number of queries: : {number_of_queries}')

            # for each subnet...
            for subnet in subnets:
                logger.info(f'Checking subnet {subnet}')
                # I'll run all the queries...
                for query in queries:
                    prepared_query = prepare_shodan_query(subnet, query['query'])
                    results = run_shodan_query(api, prepared_query)
                    time.sleep(1)

                    if results:
                        for result in results:
                            vulnerability = query['name']
                            ip = result['ip_str']

                            hostname = result['hostnames'][0] if result['hostnames'] else ""
                            timestamp_format = "%Y-%m-%dT%H:%M:%S.%f"
                            timestamp = datetime.datetime.strptime(result['timestamp'],
                                                                   timestamp_format)

                            location = result['location']
                            description = "timestamp: {}, ip: {}, protocol: {}, port: {}, " \
                                          "hostname: {}, tag: {}, asn: {} " \
                                          "geo: {}, region: {}, city {}".format(
                                              timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                                              ip, result['transport'],
                                              result['port'],
                                              hostname,
                                              vulnerability,
                                              result['asn'],
                                              location['country_code'],
                                              location['region_code'], location['city'])
                            result_summary = {
                                "description": description,
                                "ip": ip,
                                "timestamp": timestamp.strftime("%Y-%m-%dT%H:%M:%SZ"),
                                "vulnerability": vulnerability
                            }

                            result_list.append(result_summary)

            output_json['results'] = result_list
            json_output_file = os.path.join(neo4j_path, json_name)
            create_json_output(json_output_file, output_json)

            return create_statistics(output_json['results'], number_of_queries, number_of_subnets)

        else:
            logger.error('Problem with configuration file!')
    else:
        logger.error("Configuration file doesn't exist!")
