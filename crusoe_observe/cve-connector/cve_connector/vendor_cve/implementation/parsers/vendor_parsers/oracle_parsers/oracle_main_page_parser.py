"""Module contains functionality that parser main page for Oracle vulnerabilities."""

import re
import urllib.request
import configparser
import pkg_resources

from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers.html_parser \
    import HtmlParser
from cve_connector.vendor_cve.implementation.utilities.utility_functions import string_to_date

CONFIG_PATH = pkg_resources.resource_filename(__name__, "../../../data/conf.ini")


class OracleMainPageParser(HtmlParser):
    """
    Class providing functionality for parsing Oracle main page.
    """
    def __init__(self, url, from_date=None, to_date=None):
        super().__init__(url, from_date, to_date)
        self.date_format = '%d %B %Y'  # 16 December 2013
        self.load_content()

    def get_content_from_ulr(self):
        """
        Gets and returns content from URL.

        :return: content from URL
        """
        req = urllib.request.Request(url=self.url, headers={'User-Agent': 'Chrome/42.0.2311.135'})
        response = urllib.request.urlopen(req)
        if response.getcode() != 200:
            raise ConnectionError('Unable to load ', self.url)
        content = response.read()
        response.close()
        return content

    def parse(self):
        """
        Provides parsing functionality.

        :return: None
        """
        try:
            critical_patch_upd_urls = \
                self.get_bulletin_url_according_header('Critical Patch Update', False)
            solaris_3rd_party_urls = \
                self.get_bulletin_url_according_header('Solaris Third Party', False)
            oracle_linux_urls = \
                self.get_bulletin_url_according_header('Oracle Linux', False)
            oracle_vm_server_urls = \
                self.get_bulletin_url_according_header('Oracle VM Server', False)
            alerts_urls = \
                self.get_bulletin_url_according_header('Security Alert', False)
            self.add_urls_to_entities(critical_patch_upd_urls, False)
            self.add_urls_to_entities(solaris_3rd_party_urls, True)
            self.add_urls_to_entities(oracle_linux_urls, True)
            self.add_urls_to_entities(oracle_vm_server_urls, True)
            self.add_urls_to_entities(alerts_urls, False)
        except IndexError:
            raise ValueError('Format of advisory has changed.')

    def add_urls_to_entities(self, urls, add_base=True):
        """
        Adds URLs to the property entities.

        :param urls: list of urls
        :param add_base: True if base is added
        :return: None
        """
        config = configparser.ConfigParser()
        config.read(CONFIG_PATH)
        url_base = config['vendor-cve']['oracle_url_base']

        for url in urls:
            if add_base:
                url = url_base + url
            self.entities.append(url)

    def get_bulletin_url_according_header(self, header, analysis_parse_names=False):
        """
        Gets list of URLs for particular CVEs.

        :param header: header of page
        :param analysis_parse_names: True if parsing names is required
        :return: list of urls
        """
        urls = []
        rows = self.data.xpath(
            './/table/tbody[tr/th/strong[contains(text(), "{0}")]]//tr'.format(header))

        if analysis_parse_names:
            for row in rows:
                name_string = row.xpath('./td[1]//text()')
                if not name_string:
                    continue
                name_str = re.findall(r'2017', name_string[0])
                if name_str:
                    url = row.xpath('./td/a/@href')[0]
                    urls.append(url)
            return urls

        for row in rows:
            date_string = row.xpath('./td[2]/text()')
            if not date_string:
                continue
            date_str = re.findall(r'\d+ \w+ \d{4}', date_string[0])
            if date_str:
                date = string_to_date(date_str[0], self.date_format)
                url = row.xpath('./td/a/@href')[0]
                if self.from_date <= date <= self.to_date:
                    urls.append(url)
        return urls
