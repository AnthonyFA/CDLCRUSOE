import { Component, OnInit, ViewChild, AfterViewInit, ElementRef, ChangeDetectorRef } from '@angular/core';
import { DataService } from '../../shared/services/data.service';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { CVE } from 'src/app/shared/models/vulnerability.model';
import { zip } from 'rxjs';

export interface VulnerabilityData {
  ip: string;
  domainName: string;
  subnet: string;
  software: string;
}

@Component({
  selector: 'app-vulnerability',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.scss'],
})
export class VulnerabilityComponent implements OnInit, AfterViewInit {
  displayedColumns: string[] = ['ip', 'domainName', 'subnet', 'software'];
  cveSearch = 'CVE-2017-18640';
  dataSource: MatTableDataSource<VulnerabilityData>;
  cveDescription: string;
  pieChartData: { name: string; value: number }[];
  colorScheme = {
    domain: [
      '#e0f7fa',
      '#b2ebf2',
      '#80deea',
      '#4dd0e1',
      '#26c6da',
      '#00bcd4',
      '#00acc1',
      '#0097a7',
      '#00838f',
      '#006064',
    ],
  };
  @ViewChild(MatPaginator, { static: false }) paginator: MatPaginator;
  @ViewChild(MatSort, { static: false }) sort: MatSort;
  cveDetails: CVE;
  dataLoaded = false;
  dataLoading = false;
  constructor(private data: DataService, private changeDetector: ChangeDetectorRef) {
    this.dataSource = new MatTableDataSource([]);
  }
  emptyResponse = false;
  cveSearched = '';
  errorResponse = '';

  ngOnInit(): void {}

  ngAfterViewInit(): void {}

  searchVulnerability() {
    this.emptyResponse = false;
    this.errorResponse = '';
    this.cveSearched = this.cveSearch;
    this.dataLoading = true;

    const $cveDetails = this.data.getCVEDetails(this.cveSearch);
    const $vulnMachines = this.data.getVulnerableMachines(this.cveSearch);

    zip($cveDetails, $vulnMachines, (cveDetails: CVE, machines: any) => ({ cveDetails, machines })).subscribe(
      (data) => {
        this.dataSource = new MatTableDataSource(data.machines);
        const subnets = {};
        if (data.machines) {
          data.machines.forEach((row) => {
            if (!subnets[row.subnet]) {
              subnets[row.subnet] = 1;
            } else {
              subnets[row.subnet] += 1;
            }
          });
          const pieChartData = [];
          Object.keys(subnets).map((key) => {
            pieChartData.push({ name: key, value: subnets[key] });
          });

          this.pieChartData = pieChartData;
        }

        if (data.cveDetails) {
          this.cveDescription = data.cveDetails.description;
          this.cveDetails = data.cveDetails;
        }

        if (!data.cveDetails || !data.machines) {
          this.emptyResponse = true;
        }

        this.dataLoading = false;
        this.dataLoaded = true;
        this.changeDetector.detectChanges();

        this.dataSource.sort = this.sort;
        this.dataSource.paginator = this.paginator;
      },
      (error) => {
        this.errorResponse = error;
        this.dataLoading = false;
      }
    );
  }

  filterSubnet(event: { name: string; value: number; label: string }) {
    this.changeDetector.detectChanges();
    this.dataSource.filter = event.name;
    this.paginator.firstPage();
  }

  scoreClass(value: string, type: number) {
    // CVSS 2.0
    if (type === 2) {
      if (Number(value) <= 3.9) {
        return 'low';
      }

      if (Number(value) > 3.9 && Number(value) <= 6.9) {
        return 'medium';
      }

      if (Number(value) > 6.9) {
        return 'high';
      }
      // CVSS 3.0
    } else if (type === 3) {
      if (Number(value) > 8.9) {
        return 'critical';
      }
      if (Number(value) <= 3.9) {
        return 'low';
      }

      if (Number(value) > 3.9 && Number(value) <= 6.9) {
        return 'medium';
      }

      if (Number(value) > 6.9) {
        return 'high';
      }
    }
  }
}
