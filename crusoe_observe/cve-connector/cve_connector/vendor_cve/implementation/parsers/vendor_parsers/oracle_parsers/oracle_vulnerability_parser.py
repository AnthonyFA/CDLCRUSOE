"""Module contains functionality for parsing HTML page of a particular vulnerability."""

import re
import urllib.request

from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers\
    .html_parser import HtmlParser
from cve_connector.vendor_cve.implementation.utilities.check_correctness import is_correct_cve_id
from cve_connector.vendor_cve.implementation.utilities.utility_functions \
    import string_to_date, get_number_from_string, normalize_attributes
from cve_connector.vendor_cve.implementation.vendors_storage_structures.oracle import Oracle
from cve_connector.vendor_cve.implementation.vulnerability_metrics.cvss_v3_metrics import CvssV3
from cve_connector.vendor_cve.implementation.vulnerability_metrics.cvss_v2_metrics import CvssV2


def normalize_string(string):
    """
    Deletes spaces, hyphen and newline character from the string.

    :param string: string to be processed
    :return:
    """
    return re.sub(r'[ ]{2,}', '', string).replace('-', '').replace('\n', '').strip()


def make_cvss(attributes, index, is_cvss_v3):
    """
    Creates CVSSv2 or CVSSv3 object.

    :param attributes: attributes of CVSS
    :param index: start index
    :param is_cvss_v3: True if CVSSv3 is created, False if CVSSv2
    :return: CVSSv3 or CVSSv2 instance
    """
    if is_cvss_v3:
        return CvssV3(base_sc=get_number_from_string(attributes[index]),
                      att_vec=attributes[index + 1], att_comp=attributes[index + 2],
                      priv_r=attributes[index + 3], user_in=attributes[index + 4],
                      scope=normalize_string(attributes[index + 5]),
                      conf=attributes[index + 6], integ=attributes[index + 7],
                      avail=attributes[index + 8])

    return CvssV2(base_sc=get_number_from_string(attributes[index]),
                  acc_vec=attributes[index + 1], acc_comp=attributes[index + 2],
                  auth=attributes[index + 3], conf=attributes[index + 4],
                  integ=attributes[index + 5], avail=attributes[index + 6])


class OracleVulnerabilityParser(HtmlParser):
    """
    Contains functionality for parsing HTML of specific CVE.
    """
    def __init__(self, url, from_date=None, to_date=None):
        super().__init__(url, from_date, to_date)
        self.load_content()
        self.entity_to_add = None
        self.entities = []
        self.date_format = '%Y-%B-%d'  # 2017-October-17

    def get_content_from_ulr(self):
        """
        Gets and returns content from URL.

        :return: content from URL
        """
        response = urllib.request.urlopen(self.url)
        if response.getcode() != 200:
            raise ConnectionError('Unable to load ', self.url)
        content = response.read()
        response.close()
        return content

    def parse(self):
        """
        Provides parsing functionality.

        :return: None
        """
        tables_with_vuln = self.data.xpath('.//td//table[@summary="Oracle Risk Matrix"]')

        for table in tables_with_vuln:
            header, rows = self.parse_table(table)
            rows.pop(0)
            self.add_new_entities_from_rows(rows, header)

    def add_new_entities_from_rows(self, rows, table_header):
        """
        Sets new CVE entities from rows of downloaded table.

        :param rows: list of rows
        :param table_header: header of table
        :return: None
        """
        table_header = normalize_attributes(table_header)
        for row in rows:
            self.set_new_entity(row, table_header)

    def normalize_table_header_items(self, items):
        """
        Modifies items to a form which will be further processed.

        :param items: items to be modified
        :return: modified items
        """
        header_items = []
        for header in items:
            header_items.append(normalize_string(header).lower())
        return header_items

    def set_new_entity(self, attributes, header):
        """
        Creates list of entities as a property.

        :param attributes: attributes of CVE
        :param header: header of table
        :return: None
        """
        self.entity_to_add = Oracle()
        is_cvss_v3 = True

        count = 0
        for i in range(len(header)):
            count = i
            if 'cvss' in header[i].lower():
                break
            self.set_attribute_according_header(attributes[i], normalize_string(header[i]).lower())

        if '2.0' in header[count]:
            is_cvss_v3 = False
        new_cvss = make_cvss(attributes, count, is_cvss_v3)

        if is_cvss_v3:
            self.entity_to_add.cvss_v3 = new_cvss
        else:
            self.entity_to_add.cvss_v2 = new_cvss

        self.entity_to_add.supported_versions_affected = attributes[-2]
        self.entity_to_add.published = self.get_published_date()
        if self.entity_to_add.is_valid_entity():
            self.entities.append(self.entity_to_add)

        self.entity_to_add = None

    def entity_is_correct(self):
        """
        Checks if CVE ID is valid.

        :return: True if valid
        """
        return is_correct_cve_id(self.entity_to_add.cve_id)

    def set_attribute_according_header(self, attribute, header_item):
        """
        Calls particular set method according to the type of attribute.

        :param attribute: attribute to be set
        :param header_item: header item for which the attribute is a value
        :return: None
        """
        header_dictionary = {
            'cve': self.set_cve,
            'product': self.set_product,
            'component': self.set_component,
            'exploit': self.set_remote_exploit,
            'protocol': self.set_protocol,
            'package': self.set_package_priv_req
        }

        for header in header_dictionary:
            if header in header_item:
                header_dictionary.get(header)(attribute)
                break

    def set_cve(self, value):
        """
        Sets CVE ID.

        :param value: CVE ID
        :return: None
        """
        self.entity_to_add.cve_id = value

    def set_product(self, value):
        """
        Sets product.

        :param value: product
        :return: None
        """
        self.entity_to_add.product = value

    def set_component(self, value):
        """
        Sets component.

        :param value: contains component
        :return: None
        """
        self.entity_to_add.component = value

    def set_remote_exploit(self, value):
        """
        Sets remote exploit.

        :param value: remote exploit
        :return: None
        """
        self.entity_to_add.remote_exploit_without_auth = value

    def set_protocol(self, value):
        """
        Sets protocol.

        :param value: protocol
        :return: None
        """
        self.entity_to_add.protocol = value

    def set_package_priv_req(self, value):
        """
        Sets package privileges requirements.

        :param value: package privilege requirements
        :return: None
        """
        self.entity_to_add.package_privilege_req = value

    def get_published_date(self):
        """
        Extracts and returns published date.

        :return: published date or None
        """
        history_table = self.data.xpath('.//table[@summary="Modification History"]')
        if history_table:
            row_initial = history_table[0].xpath('.//tr[td[contains(text(), "Initial")]]')
            if not row_initial:
                row_initial = history_table[0].xpath('.//tr[td//*[contains(text(), "Initial")]]')
            date_str = row_initial[0].xpath('.//td[1]//text()')
            if date_str:
                date = string_to_date(date_str[0], self.date_format)
                return date
        return None
