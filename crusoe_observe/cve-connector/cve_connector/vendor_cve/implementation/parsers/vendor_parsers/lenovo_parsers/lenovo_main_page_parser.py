"""Module contains functionality that parser main page for Lenovo vulnerabilities."""

from cve_connector.vendor_cve.implementation.parsers.general_and_format_parsers.html_parser \
    import HtmlParser

from cve_connector.vendor_cve.implementation.utilities.utility_functions \
    import string_to_date, normalize_string


class LenovoMainPageParser(HtmlParser):
    """
    Class providing functionality for parsing Lenovo main page.
    """
    def __init__(self, url, from_date=None, to_date=None):
        super().__init__(url, from_date, to_date)
        self.load_content()
        self.date_format = '%Y-%m-%d'

    def parse(self):
        """
        Provides parsing functionality.

        :return: None
        """
        table_rows = self.data.xpath('.//table/tbody/tr')
        if not table_rows:
            raise ValueError('Format of parsed data has changed.')
        table_rows.pop(0)  # remove header
        for row in table_rows:
            self.parse_table_row(row)

    def parse_table_row(self, row):
        """
        Parses one row from the table.

        :param row: row of a table
        :return: None
        """
        published_date_str = str(row.xpath('.//text()')[-4]) if len(row.xpath('.//text()')) > 4 \
            else []
        updated_date_str = str(row.xpath('.//text()')[-2]) if len(row.xpath('.//text()')) > 4 \
            else []
        published_date = None
        updated_date = None
        if published_date_str:
            published_date = string_to_date(normalize_string(published_date_str), self.date_format)
        if updated_date_str:
            updated_date = string_to_date(normalize_string(updated_date_str), self.date_format)

        if published_date and updated_date and (self.from_date <= published_date <= self.to_date or
                                                self.from_date <= updated_date <= self.to_date):
            url = row.xpath('.//td[2]//a/@href')
            if url:
                self.entities.append(url[0])
