"""Module contains class which represents CVSSv3."""

from cve_connector.vendor_cve.implementation.utilities.check_correctness \
    import is_correct_score, is_correct_vector_v3


class CvssV3:
    """
    Class representing CVSSv3.
    """
    def __init__(self, base_sc=0.0, severity='', vec_str='', att_vec='', att_comp='',
                 priv_r='', user_in='', scope='', conf='', integ='', avail='',
                 temp_sc=0.0, env_sc=0.0):
        self.base_score = base_sc
        self.severity = severity

        self.vector_string = vec_str

        self.attack_vector = att_vec
        self.attack_complexity = att_comp
        self.priv_required = priv_r
        self.user_interaction = user_in
        self.scope = scope
        self.confidentiality = conf
        self.integrity = integ
        self.availability = avail

        self.environmental_score = env_sc
        self.temporal_sc = temp_sc

    def is_valid(self):
        """
        Tests correctness of created instance of this class.

        :return: True if valid
        """
        return (self.base_score is None or is_correct_score(self.base_score)) and \
               (self.vector_string == '' or is_correct_vector_v3(self.vector_string))

    def check_metrics_if_different_v3(self, other):
        """
        Check whether other CVSSv3 and self are different.

        :param other: other CVSSv3
        :return: true if self and other CVSSv3 are different
        """
        if not isinstance(other, CvssV3):
            return TypeError('Cvss v3.0 - Comparing different types.')
        return self.check_base_score_if_different_v3(other) or \
            self.compare_metrics_string_element_v3(
                self.severity, other.severity) or \
            self.compare_metrics_string_element_v3(
                self.attack_vector, other.attack_vector) or \
            self.compare_metrics_string_element_v3(
                self.priv_required, other.priv_required) or \
            self.compare_metrics_string_element_v3(
                self.user_interaction, other.user_interaction) or \
            self.compare_metrics_string_element_v3(
                self.scope, other.scope) or \
            self.compare_metrics_string_element_v3(
                self.confidentiality, other.confidentiality) or \
            self.compare_metrics_string_element_v3(
                self.integrity, other.integrity) or \
            self.compare_metrics_string_element_v3(
                self.availability, other.availability)

    @staticmethod
    def compare_metrics_string_element_v3(el1, el2):
        """
        Compare values of appropriate metric of CVSSv3 in a form of string.

        :param el1: first value of the metric (string)
        :param el2: second value of the metric (string)
        :return: True if values are different
        """
        if not el1 or not el2:
            return False
        return not el1.lower() == el2.lower()

    def check_vector_string_if_different_v3(self, other):
        """
        Tests whether self and other vector string of CVSSv3 are different.

        :param other: other vector string of CVSSv3
        :return: True if vectors (in a form of string) are different
        """
        if self.vector_string != '' and other.vector_string != '':
            vector1 = self.vector_string.replace('()', '')
            vector2 = other.vector_string.replace('()', '')
            return not (vector1 in vector2 or vector2 in vector1)

    def check_base_score_if_different_v3(self, other):
        """
        Tests whether base score of self and other base score are different.

        :param other: other base score
        :return: True if scores are different
        """
        if self.base_score and other.base_score:
            return not self.base_score == other.base_score
        return False
