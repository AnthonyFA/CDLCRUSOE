"""Module contains class which represents CVSSv2."""

from cve_connector.vendor_cve.implementation.utilities.check_correctness import is_correct_score


class CvssV2:
    """
    Class representing CVSSv2.
    """
    def __init__(self, base_sc=0.0, severity='', vector='', acc_vec='', acc_comp='', auth='',
                 conf='', integ='', avail=''):
        self.base_score = base_sc
        self.severity = severity
        self.vector_string = vector

        self.access_vector = acc_vec
        self.access_complexity = acc_comp
        self.authentication = auth
        self.confidentiality_impact = conf
        self.integrity_impact = integ
        self.availability_impact = avail

    def is_valid(self):
        """
        Tests correctness of created instance of this class.

        :return: True if valid
        """
        return is_correct_score(self.base_score)

    def check_metrics_if_different_v2(self, other):
        """
        Check whether other CVSSv2 and self are different.

        :param other: other CVSSv2
        :return: true if self and other CVSSv2 are different
        """
        if not isinstance(other, CvssV2):
            raise TypeError('Cvss v2.0 - Comparing different types.')
        return self.check_base_score_if_different_v2(other) or \
            self.compare_metrics_string_element_v2(
                self.severity, other.severity) or \
            self.compare_metrics_string_element_v2(
                self.access_vector, other.access_vector) or \
            self.compare_metrics_string_element_v2(
                self.access_complexity, other.access_complexity) or \
            self.compare_metrics_string_element_v2(
                self.authentication, other.authentication) or \
            self.compare_metrics_string_element_v2(
                self.confidentiality_impact, other.confidentiality_impact) or \
            self.compare_metrics_string_element_v2(
                self.integrity_impact, other.integrity_impact) or \
            self.compare_metrics_string_element_v2(
                self.availability_impact, other.availability_impact)

    @staticmethod
    def compare_metrics_string_element_v2(el1, el2):
        """
        Compare values of appropriate metric of CVSSv2 in a form of string.

        :param el1: first value of the metric (string)
        :param el2: second value of the metric (string)
        :return: True if values are different
        """
        if not el1 or not el2:
            return False
        return el1.lower() != el2.lower()

    def check_vector_string_if_different_v2(self, other):
        """
        Tests whether self and other vector string of CVSSv2 are different.

        :param other: other vector string of CVSSv2
        :return: True if vectors (in a form of string) are different
        """
        if self.vector_string != '' and other.vector_string != '':
            vector1 = self.vector_string.replace('()', '')
            vector2 = other.vector_string.replace('()', '')
            return not (vector1 in vector2 or vector2 in vector1)

    def check_base_score_if_different_v2(self, other):
        """
        Tests whether base score of self and other base score are different.

        :param other: other base score
        :return: True if scores are different
        """
        if self.base_score and other.base_score:
            return self.base_score != other.base_score
        return False
