"""Module classifier.py contains functionality that classifies CVEs."""

from cve_connector.nvd_cve.categorization.cia_loss import has_system_confidentiality_loss, \
    has_system_integrity_loss, has_system_availability_loss, add_other_cia_impacts, \
    system_confidentiality_changed, system_integrity_changed, system_availability_changed
from cve_connector.nvd_cve.categorization.code_execution import has_code_execution_as_root, \
    has_code_execution_as_user
from cve_connector.nvd_cve.categorization.gain_privileges import has_gain_root_privileges, \
    has_gain_user_privileges, has_privilege_escalation, has_gain_application_privileges


def classifier(vulner_info):
    """
    Function that classifies CVEs according to vulner_info.

    :param vulner_info: object of class Vulnerability from cve_parser.py
    :return: result impact or impacts
    """
    result_impacts = test_root_level_impacts(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = system_cia_loss(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = test_user_level_impacts(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = distinguish_system_application(vulner_info)
    return result_impacts


def test_root_level_impacts(vulner_info):
    """
    Test whether CVE has one of impacts:
    "Arbitrary code execution as root/administrator/system",
    "Gain root/system/administrator privileges on system",
    "Privilege escalation on system".

    :param vulner_info: object of class Vulnerability from cve_parser.py
    :return: result impact or impacts
    """
    result_impacts = []

    if has_code_execution_as_root(
            vulner_info.description,
            vulner_info.cvssv2,
            vulner_info.cvssv3):
        result_impacts.append(
            "Arbitrary code execution as root/administrator/system")
        return result_impacts

    if has_gain_root_privileges(
            vulner_info.description,
            vulner_info.cvssv2,
            vulner_info.cvssv3):
        result_impacts.append(
            "Gain root/system/administrator privileges on system")
        return result_impacts

    if has_privilege_escalation(
            vulner_info.description.lower(),
            vulner_info.cvssv2):
        result_impacts.append("Privilege escalation on system")
        return result_impacts

    return result_impacts


def system_cia_loss(vulner_info):
    """
    Test whether CVE has one of impacts:
    "System confidentiality loss",
    "System integrity loss",
    "System availability loss".

    :param vulner_info: object of class Vulnerability from cve_parser.py
    :return: result impact or impacts
    """
    result_impacts = []

    if has_system_confidentiality_loss(
            vulner_info.description.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System confidentiality loss")

    if has_system_integrity_loss(
            vulner_info.description.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System integrity loss")

    if has_system_availability_loss(
            vulner_info.description.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System availability loss")

    add_other_cia_impacts(result_impacts, vulner_info.cvssv2)

    return result_impacts


def test_user_level_impacts(vulner_info):
    """
    Test whether CVE has one of impacts:
    "Gain user privileges on system",
    "Arbitrary code execution as user of application",
    "Gain privileges on application".

    :param vulner_info: object of class Vulnerability from cve_parser.py
    :return: result impact or impacts
    """
    result_impacts = []
    if has_gain_user_privileges(
            vulner_info.description.lower(),
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("Gain user privileges on system")
        return result_impacts

    if has_code_execution_as_user(
            vulner_info.description.lower(),
            vulner_info.cvssv3):
        result_impacts.append(
            "Arbitrary code execution as user of application")
        return result_impacts

    if has_gain_application_privileges(
            vulner_info.description.lower()):
        result_impacts.append("Gain privileges on application")
        return result_impacts

    return result_impacts


def distinguish_system_application(vulner_info):
    """
    Test whether CVE has system CIA loss or application CIA loss.

    :param vulner_info: object of class Vulnerability from cve_parser.py
    :return: result impact or impacts
    """
    result_impacts = []
    if system_confidentiality_changed(
            vulner_info.description,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System confidentiality loss")

    if system_integrity_changed(
            vulner_info.description,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System integrity loss")

    if system_availability_changed(
            vulner_info.description,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System availability loss")

    if not result_impacts:
        if vulner_info.cvssv3['i'] != "NONE":
            result_impacts.append("Application integrity loss")
        if vulner_info.cvssv3['a'] != "NONE":
            result_impacts.append("Application availability loss")
        if vulner_info.cvssv3['c'] != "NONE":
            result_impacts.append("Application confidentiality loss")

    return result_impacts
