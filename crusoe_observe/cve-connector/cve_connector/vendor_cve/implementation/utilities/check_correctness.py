"""Module containing functionality related to check of correctness shared among multiple modules."""

import re


def is_correct_cve_id(cve):
    """
    Checks whether ID of CVE is valid.

    :param cve: ID of CVE
    :return: True if valid
    """
    return cve is not None and re.match(r'cve-\d+-\d+', cve.lower())


def is_correct_cwe(cwe):
    """
    Checks whether ID of CWE in a form CWE-number is valid.

    :param cwe: ID of CWE
    :return: True if valid
    """
    return cwe is not None and re.match(r'cwe-\d+', cwe.lower())


def is_correct_vector_v3(vector):
    """
    Checks whether CVSSv3 base vector is valid.

    :param vector: base vector of CVSSv3 (string)
    :return: True if valid
    """
    return vector is not None \
        and re.match(r'(CVSS:3\.0/)?AV:[NALP]/AC:[LH]/PR:[NLH]/UI:[NR]/S:[UC]/C:[NLH]/I:[NLH]'
                     r'/A:[NLH](/E:[XUPFH]/RL:[XOTWU]/RC:[XURC])?', vector)


def is_correct_vector_v2(vector):
    """
    Checks whether CVSSv2 base vector is valid.

    :param vector: base vector of CVSSV2 (string)
    :return: True if valid
    """
    return vector is not None \
        and re.match(r'[(]?AV:[LAN]/AC:[HML]/Au:[MSN]/C:[NPC]/I:[NPC]/A:[NPC][)]?', vector)


def is_correct_score(score):
    """
    Check whether score is in [0.0, 10.0].

    :param score: base score
    :return: True if valid
    """
    return 0.0 <= score <= 10.0


def is_valid_date(date):
    """
    Checks whether parsed date has the right form.

    :param date: date in a form of string
    :return: True if valid
    """
    return re.match(r'\d{1,2}[.-/ ]\d{1,2}[.-/ ]\d{4}', date) \
        or re.match(r'\d{4}[.-/ ]\d{1,2}[.-/ ]\d{1.2}', date)
